import os
import torch
from torchvision import datasets, transforms, models
from torch.utils.data import DataLoader
import torch.nn.functional as nnf
from google.colab import drive
drive.mount('/content/drive')

if torch.cuda.is_available():
  print("Run on GPU")
  device = torch.device("cuda")
else:
  print("Run on CPU")
  device = torch.device("cpu")

imageDirectory = "/content/drive/MyDrive/ColabNotebooks/data/"

transforms = {'train': transforms.Compose([transforms.RandomResizedCrop(299),transforms.RandomHorizontalFlip(),transforms.ToTensor(),transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),'val': transforms.Compose([transforms.Resize(299),transforms.CenterCrop(299),transforms.ToTensor(),transforms.Normalize([0.480, 0.450, 0.400], [0.229, 0.224, 0.225])]),}

imageDataset = {data: datasets.ImageFolder(os.path.join(imageDirectory, data), transform=transforms[data]) for data in ['train','val']}
  
dataLoader = {data: DataLoader(imageDataset[data], batch_size=16, shuffle=True, num_workers=2) for data in ['train','val']}

sizes = {data: len(imageDataset[data]) for data in ['val']}

classNames = imageDataset['train'].classes
print(classNames)

#now we can load the model since we have prepared the data
model = models.inception_v3(weights=models.Inception_V3_Weights.DEFAULT)
num_ftrs = model.fc.in_features
model.fc = torch.nn.Linear(num_ftrs, len(classNames))
model = model.to(device)
model.eval()

correct = 0
total = 0

with torch.no_grad():
    for inputs, labels in dataLoader['val']:
        inputs = inputs.to(device)
        labels = labels.to(device)
        
        outputs = model(inputs)
        _, preds = torch.max(outputs, 1)
        correct += torch.sum(preds == labels.data)
        total += labels.size(0)

accuracy = correct.double() / total
print(f'Validation Accuracy: {accuracy:.4f}')

  
